import pymongo
from DAO.DataAccess import DataAccess
import pickle 

"""
We are going to consider this schemas for the different collections
-model
{
    _id:ObjectId generated by mongo,
    date: timestamp of creation,
    model_name: Name for the model,
    model_data: pickled model
}
-data
{
    _id:ObjectId generated by mongo,
    data_id: an id than will then help if we need to train again the model,
    data: dictionary with the relevant data from the form,
    prediction: the value for the prediction,
    review: the value then placed by the doctor in the post operatory evaluation
}
"""

class MongoAccess(DataAccess):
    DATABASE_LOC="mongodb://localhost:27017/"
    DATABASE_NAME="modelDB"
    MODEL_COLLECTION="model"
    DATA_COLLECTION="data"

    model_collection=None
    data_collection=None
    model_name=None
    
    def __init__(self,model_name):
        try:
            DB=pymongo.MongoClient(self.DATABASE_LOC)[self.DATABASE_NAME]
            self.model_collection=DB[self.MODEL_COLLECTION]
            print("Mongo Model Collection Connected")
            self.data_collection=DB[self.DATA_COLLECTION]
            print("Mongo Data Collection Connected")
            self.model_name=model_name
        except:
            raise Exception("Error Connecting to the database")
    def getModel(self):
        if self.model_collection is not None:
            data=self.model_collection.find({'name':self.model_name}).sort("date",-1)
            if data!=[]:
                for model in data:
                    try:
                        model_info=pickle.loads(model["model_data"])
                        return model_info
                    except:
                        continue
            raise Exception("Error loading the model data")
        else:
            raise Exception("There is no connection to model collection")
    def postData(self, data: dict) -> bool:
        try:
            self.data_collection.insert_one(data)
            return True
        except:
            raise Exception("Error uploading data")
    def updateReview(self, data: dict) -> bool:
        try:
            data_id=data["data_id"]
            self.data_collection.update_one({"data_id":data_id},{"$set":{"review":data["review"]}})
            return True
        except:
            raise Exception("Error Loading the review")
    